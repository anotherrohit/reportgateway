package com.kunj.ebuxx.web.controller;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.kunj.ebuxx.service.AuthService;
import com.kunj.ebuxx.service.LoginService;
import com.kunj.ebuxx.service.UtilService;
import com.kunj.ebuxx.util.FaultEnum;
import com.kunj.ebuxx.validation.service.LoginValidationService;
import com.kunj.ebuxx.view.json.user.UserLoginRequest;
import com.kunj.ebuxx.view.json.user.UserLoginResponse;

@RestController
public class LoginController {

	@Autowired
	private AuthService authService;

	@Autowired
	private LoginService loginService;

	@Autowired
	private LoginValidationService loginValidationService;

	@Autowired
	private UtilService utilService;

	private final Log logger = LogFactory.getLog(getClass());

	/**
	 * This controller use for authenticate user and generate token as per
	 * request on the admin side
	 * 
	 * @param UserLoginRequest
	 * @return
	 * @throws AuthenticationException
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<?> createAuthenticationToken(@RequestBody UserLoginRequest userLoginRequest) throws AuthenticationException {
		UserLoginResponse userLoginResponse = new UserLoginResponse();
		try {
			userLoginResponse = loginValidationService.validateLoginRequest(userLoginRequest);
			if (userLoginResponse == null) {
				userLoginResponse = loginService.checkAuthentication(userLoginRequest);
				return ResponseEntity.ok(userLoginResponse);
			} else {
				return ResponseEntity.ok(userLoginResponse);
			}
		} catch (Exception e) {
			userLoginResponse = new UserLoginResponse();
			userLoginResponse.setFault(utilService.getFaultsObject(FaultEnum.SYSTEM_ERROR));
			logger.error("Error in loginService.checkAuthentication() ", e);
			e.printStackTrace();
			return ResponseEntity.ok(userLoginResponse);
		}
	}

	/**
	 * This controller use for refreshing token as per request on the admin side
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "refresh", method = RequestMethod.GET)
	public ResponseEntity<?> refreshAndGetAuthenticationToken(HttpServletRequest request) {
		/*
		 * String token = request.getHeader(tokenHeader); String username =
		 * jwtTokenUtil.getUsernameFromToken(token); FreshFeedUser user =
		 * (FreshFeedUser) userDetailsService.loadUserByUsername(username);
		 */

		// if (jwtTokenUtil.canTokenBeRefreshed(token,
		// user.getLastPasswordResetDate())) {
		// String refreshedToken = jwtTokenUtil.refreshToken(token);
		// return ResponseEntity.ok(new
		// FreshFeedAuthenticationResponse(refreshedToken));
		// } else {
		return ResponseEntity.badRequest().body(null);
		// }
	}

}
